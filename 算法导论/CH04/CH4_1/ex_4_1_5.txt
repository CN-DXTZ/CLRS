注：翻译错误，最后一句话：可以在 “常数” 时间内找出形如...
(1)
(a)文字说明
可以将整个数组看成一段段离散的和非负的子数组，
如：13, -3, -25, 18, 20, -7, 12, -5, -22, 15, -4, 7
非负数为：(13), -3, -25, (18), -3, (20), -7, (12), -5, -22, (15), -4, (7)
求最大子数组，即为找到将几个非负子数组合并后新的子数组和更大的合并方式，
要将一个非负子数组并入下一个非负子数组，只需该非负子数组的和抵消间隔的负数后仍非负，
即：(13) - 3 - 25 < 0，并入 (18) 将使 (18) 减小，故不并入
而：(18) - 3 > 0，并入 (20) 将使 (20) 增大，故并入
接着：(18) - 3 + (20) -7 > 0，并入 (12) 将使 (12) 增大，故并入
故此可以将整个数组切分成几段局部最大子数组如下：
13, -3, -25, 18, 20, -7, 12, -5, -22, 15, -4, 7
[13], -3, -25, [18, 20, -7, 12], -5, -22, [15, -4, 7]
整体的步骤如下：
初始化：A[0]作为当前子数组，即为最大子数组
循环：当前子数组的和若：
    a.非负，+A[i]，抵消间隔的负数或并入下一非负子数组并记录最大子数组
    b.为负，该段已达到局部最大，新起一段子数组

b)伪代码
最大子数组（线性，非递归）
FIND_MAXIMUM_SUBARRAY_LINEAR(A)
max_left = 0, max_right = 0, max_sum = A[0];
left = 0, sum = A[0];
for i = 1 to length
    if sum >= 0 // 当前子数组和非负
        sum = sum + A[i]
        // 当前子数组已知最大
        if max_sum < sum
            max_left = left
            max_right = i
            max_sum = sum
    else
        left = i
        sum = A[i]
return {max_left, max_right, max_sum}

(2)
可以看出线性时间算法快于分治算法，
但奇怪的是分治算法也是线性倍数，并没有多一个对数倍，很奇怪？？？